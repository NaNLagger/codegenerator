package ${packageName}.view

import android.os.Bundle
import android.view.View
import moxy.presenter.InjectPresenter
import moxy.presenter.ProvidePresenter
import ${packageName}.presenter.${name}Presenter
#if($useArgument != "")import ${packageName}.model.${name}ScreenData
#end
#if($useArgument != "")import ru.skblab.skbbank.util.ArgumentsHolder
#end
import ${manifestPackage}.R
import ${parentScopePackage}.${parentScope}
import ru.skblab.skbbank.dialog.BaseBottomDialogFragment
import toothpick.Toothpick
#if ($synthetic != "")import kotlinx.android.synthetic.main.fmt_{nameSnakeCase}.*
#end
#if ($viewBinding != "")import ${manifestPackage}.databinding.Fmt${name}Binding
#end
#if ($viewBinding != "")import ru.skblab.skbbank.util.viewbinding.viewBinding
#end

class ${name}Fragment : BaseBottomDialogFragment(), ${name}View#if($useArgument != ""), ArgumentsHolder<${name}ScreenData>#end {
    #if ($viewBinding != "")private val viewBinding by viewBinding(Fmt${name}Binding::bind, this::contentViewProvider)
#end
    override val contentView: Int = R.layout.fmt_${nameSnakeCase}
    override val closeListener: () -> Unit = { presenter.onBackPressed() }

    @InjectPresenter
    lateinit var presenter: ${name}Presenter

    @ProvidePresenter
    fun providePresenter(): ${name}Presenter =
        Toothpick.openScopes(${parentScope}, scopeName)
#if($useArgument != "")            .module { bind(${name}ScreenData::class.java).toInstance(args) }
#end
            .getInstance(${name}Presenter::class.java)
            .also { Toothpick.closeScope(scopeName) }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

    }

    companion object {
        fun newInstance(#if($useArgument != "")screenData: ${name}ScreenData#end): ${name}Fragment {
            return ${name}Fragment().apply { #if($useArgument != "")args = screenData#end }
        }
    }
}